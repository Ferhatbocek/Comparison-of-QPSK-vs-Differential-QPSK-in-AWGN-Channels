clc; 
clear all; 
close all;  

k=double(1.0)/double(sqrt(2)); 
constellation=k*[1+1i -1+1i -1-1i 1-1i]; 

ninputs = 200; 
EbN0dB = 5:1:25; 
k=2; 
EsN0dB = EbN0dB + 10*log10(k); 

for k=1:ninputs 
 input(k)= randi([0, (2^2-1)]); 
end


phase=[0 1 3 2]; 
input=[0 input]; 
input_phase=zeros(1,ninputs+1);
absolute_phase=phase(input+1); 
for k=2:ninputs+1
    input_phase(k)=mod((input_phase(k-1)+phase(input(k)+1)),4);
end
input_mod=constellation(input_phase+1);

number_snr = length(EbN0dB);
perr_estimate = zeros(1,number_snr); 
serr_estimate =  zeros(1,number_snr); 

for k=1:number_snr 
    EbN0dB_now = EbN0dB(k); 
    ebno=10^(EbN0dB_now/10); 
    sigma=sqrt(1/(ebno)); 
    
    received = DQPSK_Noise(input_mod,sigma,ninputs+1); 
    decisions=zeros(1,ninputs+1);
    for n=1:ninputs+1 
        
        distances = abs(received(n)-constellation);  
                                                        
        [min_dist,decisions(n)] = min(distances); 
                                                   
                                                   
    end
     
    decision_phase=decisions-1;
    decoded_phase=zeros(1,ninputs+1);
    
    for n=2:ninputs+1
        if decision_phase(n)>=decision_phase(n-1) 
                       
            decoded_phase(n)=(decision_phase(n)-decision_phase(n-1)); 
        else
            decoded_phase(n)=(4+decision_phase(n)-decision_phase(n-1)); 
               
        end
    end
    
    decoded_symbol=phase(decoded_phase+1);
    error=error_cal(decoded_symbol(2:end),input(2:end)); 
    perr_estimate(k) =perr_estimate(k)+ sum(error)/(ninputs);
    
    sym_err=(decoded_symbol(2:end) ~= (input(2:end)));  
    serr_estimate(k) =serr_estimate(k)+ sum(sym_err)/ninputs; 
end

figure
semilogy(EbN0dB,perr_estimate); 
hold on; 
semilogy(EbN0dB,2*qfunc((sqrt(10.^(EbN0dB/10))))); 
legend("Experimental BER ","Theoretical using Q function"); 
xlabel("Eb/N0 (dB)"); 
ylabel("BER (Bit Error Rate) "); 
title("BER plot for "+string(ninputs)+" input symbols.");

%%%%%%%%%%%%%%%%%%% DENEME ÇALIŞMA BÖLGESİ
scatterplot(error, [], [], 'r*'); grid minor, title('With AWGN');
figure('Name','QPSK Modulation','NumberTitle','off');
subplot(2,1,1);
stairs(NZR);    
grid minor; 
xlim([0,N]); 
ylim([0,1.1]);
title('Message Signal');
subplot(2,1,2);
plot(mod); 
grid minor; 
title('QPSK Modulated Signal'); 
ylim([-2,2]);


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



function [output] = DQPSK_Noise(input_mod,sigma,ninputs)
sigma=sigma/sqrt(2); 
output = input_mod + sigma*randn(1,ninputs)+j*sigma*randn(1,ninputs); 
end



function error = error_cal(decisions_bin,input)
for s=1:length(input)
    d_bin=de2bi(decisions_bin(s),2); 
    i_bin=de2bi(input(s),2);  
    biterror=0;   
    for t=1:2
        if d_bin(t)~=i_bin(t)
            biterror=biterror+1;  
        end
        num(s)=biterror; 
    end
end
error=num;
end

